{
  "version": 3,
  "sources": ["../src/lib/util.ts", "../src/lib/geometry.ts", "../src/bouncy-ball.ts"],
  "sourcesContent": ["export function h<T extends HTMLElement>(tagName: string, props: { [key: string]: any }, children?: Array<HTMLElement>): T {\r\n  const elm = document.createElement(tagName);\r\n  const { style } = props;\r\n  delete props.style;\r\n  Object.assign(elm, props);\r\n  Object.assign(elm.style, style);\r\n  if (children) {\r\n    elm.append(...children);\r\n  }\r\n  return elm as T;\r\n}\r\n\r\nh.div = (props: { [key: string]: any }, children?: Array<HTMLElement>) => h<HTMLDivElement>(\"div\", props, children);\r\nh.input = (props: { [key: string]: any }, children?: Array<HTMLElement>) => h<HTMLInputElement>(\"input\", props, children);\r\nh.button = (props: { [key: string]: any }, children?: Array<HTMLElement>) => h<HTMLButtonElement>(\"button\", props, children);\r\nh.canvas = (props: { [key: string]: any }, children?: Array<HTMLElement>) => h<HTMLCanvasElement>(\"canvas\", props, children);\r\n\r\nexport function docAppend<T extends HTMLElement>(elm: T): T {\r\n  document.body.appendChild(elm);\r\n  return elm;\r\n}\r\n\r\nexport function mapRange(value, min1, max1, min2, max2) {\r\n  return ((value - min1) / (max1 - min1)) * (max2 - min2) + min2;\r\n}\r\n\r\nexport function clamp(value, min, max) {\r\n  return Math.max(min, Math.min(max, value));\r\n}\r\n\r\nexport function lerp(a, b, t) {\r\n  return a + (b - a) * t;\r\n}\r\n\r\nexport function px(value) {\r\n  return value + \"px\";\r\n}\r\n\r\nexport function assign<T>(o: T, props: Partial<T>): T {\r\n  // @ts-ignore\r\n  return Object.assign(o, props);\r\n}\r\n\r\nexport function calculateMagnitudeFromVector(vector) {\r\n  const x = vector[0];\r\n  const y = vector[1];\r\n  return Math.sqrt(x * x + y * y);\r\n}\r\n\r\nexport function calcualteNormalizedVector(vector) {\r\n  const magnitude = calculateMagnitudeFromVector(vector);\r\n  const x = vector[0];\r\n  const y = vector[1];\r\n  return [x / magnitude, y / magnitude];\r\n}\r\n\r\nexport function calculateAngleFromVector(vector) {\r\n  const newVector = calcualteNormalizedVector(vector);\r\n  const x = newVector[0];\r\n  const y = newVector[1];\r\n\r\n  // Calculate the angle in radians\r\n  let angleRadians = Math.atan2(y, x);\r\n\r\n  // Optionally, convert to degrees\r\n  let angleDegrees = angleRadians * (180 / Math.PI);\r\n\r\n  return {\r\n    radians: angleRadians,\r\n    degrees: angleDegrees,\r\n  };\r\n}\r\n\r\n// export function with<T>(value:T, fn: (value:T) => void) : void{\r\n//   fn(value);\r\n// }\r\n\r\nexport function withFn<T>(value: T, fn: (value: T) => void): T {\r\n  fn(value);\r\n  return value;\r\n}\r\n\r\nexport function arraySortBy<T>(arr: Array<T>, fn: (value: T) => any): Array<T> {\r\n  return arr.slice().sort((a, b) => {\r\n    const aVal = fn(a);\r\n    const bVal = fn(b);\r\n    return aVal < bVal ? -1 : aVal > bVal ? 1 : 0;\r\n  });\r\n}\r\n\r\nexport function first<T>(arr: Array<T>): T {\r\n  return arr[0];\r\n}\r\n\r\nexport function pipe<A, B>(o: A, fn: (o: A) => B): B;\r\nexport function pipe<A, B, C>(o: A, fn: (o: A) => B, fn2: (o: B) => C): C;\r\nexport function pipe<A, B, C, D>(o: A, fn: (o: A) => B, fn2: (o: B) => C, fn3: (o: C) => D): D;\r\nexport function pipe<A, B, C, D, E>(o: A, fn: (o: A) => B, fn2: (o: B) => C, fn3: (o: C) => D, fn4: (o: D) => E): E;\r\nexport function pipe(value: any, ...fns: Array<(value: any) => any>): any {\r\n  return fns.reduce((acc, fn) => fn(acc), value);\r\n}\r\n\r\nexport function nullthrows<T>(value: T | null | undefined): T {\r\n  if (value == null) {\r\n    throw new Error(\"Value is null\");\r\n  }\r\n\r\n  return value;\r\n}\r\n", "import { arraySortBy, first } from \"./util\";\r\n\r\nexport type Rect = { x: number; y: number; w: number; h: number };\r\nexport type Point = { x: number; y: number };\r\nexport type Vector = Point;\r\n\r\nexport const Point = {\r\n  Zero: Object.freeze({ x: 0, y: 0 }),\r\n  add(point1: Point, point2: Point) {\r\n    return {\r\n      x: point1.x + point2.x,\r\n      y: point1.y + point2.y,\r\n    };\r\n  },\r\n  subtract(point1: Point, point2: Point) {\r\n    return {\r\n      x: point1.x - point2.x,\r\n      y: point1.y - point2.y,\r\n    };\r\n  },\r\n  mul(point: Point, scalar: number) {\r\n    return {\r\n      x: point.x * scalar,\r\n      y: point.y * scalar,\r\n    };\r\n  },\r\n  divide(point: Point, scalar: number) {\r\n    return {\r\n      x: point.x / scalar,\r\n      y: point.y / scalar,\r\n    };\r\n  },\r\n  distance(point1: Point, point2: Point) {\r\n    const x = point2.x - point1.x;\r\n    const y = point2.y - point1.y;\r\n    return Math.sqrt(x * x + y * y);\r\n  },\r\n  magnitude(point: Point) {\r\n    const x = point.x;\r\n    const y = point.y;\r\n    return Math.sqrt(x * x + y * y);\r\n  },\r\n  clone(point: Point) {\r\n    return { x: point.x, y: point.y };\r\n  },\r\n  normalize(point: Point) {\r\n    const magnitude = Point.magnitude(point);\r\n    const x = point.x;\r\n    const y = point.y;\r\n\r\n    if (magnitude === 0) return Point.clone(Point.Zero);\r\n\r\n    return {\r\n      x: x / magnitude,\r\n      y: y / magnitude,\r\n    };\r\n  },\r\n  angle(point: Point) {\r\n    const newPoint = Point.normalize(point);\r\n    const { x, y } = newPoint;\r\n    let radians = Math.atan2(y, x);\r\n    return radians;\r\n  },\r\n};\r\n\r\nexport const Rect = {\r\n  left(rect: Rect) {\r\n    return rect.x;\r\n  },\r\n  right(rect: Rect) {\r\n    return rect.x + rect.w;\r\n  },\r\n  top(rect: Rect) {\r\n    return rect.y;\r\n  },\r\n  bottom(rect: Rect) {\r\n    return rect.y + rect.h;\r\n  },\r\n  topLeft(rect: Rect) {\r\n    return { x: Rect.left(rect), y: Rect.top(rect) };\r\n  },\r\n  topCenter(rect: Rect) {\r\n    return { x: Rect.centerX(rect), y: Rect.top(rect) };\r\n  },\r\n  topRight(rect: Rect) {\r\n    return { x: Rect.right(rect), y: Rect.top(rect) };\r\n  },\r\n  bottomLeft(rect: Rect) {\r\n    return { x: Rect.left(rect), y: Rect.bottom(rect) };\r\n  },\r\n  bottomRight(rect: Rect) {\r\n    return { x: Rect.right(rect), y: Rect.bottom(rect) };\r\n  },\r\n  points(rect: Rect) {\r\n    return [Rect.topLeft(rect), Rect.topRight(rect), Rect.bottomRight(rect), Rect.bottomLeft(rect)];\r\n  },\r\n  fromPoints(points: Point[]) {\r\n    const x = Math.min(...points.map((p) => p.x));\r\n    const y = Math.min(...points.map((p) => p.y));\r\n    const w = Math.max(...points.map((p) => p.x)) - x;\r\n    const h = Math.max(...points.map((p) => p.y)) - y;\r\n    return { x, y, w, h };\r\n  },\r\n  setTopLeft(rect: Rect, value: Point) {\r\n    rect.x = value.x;\r\n    rect.y = value.y;\r\n  },\r\n  centerX(rect: Rect) {\r\n    return rect.x + rect.w / 2;\r\n  },\r\n  centerY(rect: Rect) {\r\n    return rect.y + rect.h / 2;\r\n  },\r\n  center(rect: Rect) {\r\n    return { x: Rect.centerX(rect), y: Rect.centerY(rect) };\r\n  },\r\n  centerRight(rect: Rect) {\r\n    return { x: Rect.right(rect), y: Rect.centerY(rect) };\r\n  },\r\n  centerLeft(rect: Rect) {\r\n    return { x: Rect.left(rect), y: Rect.centerY(rect) };\r\n  },\r\n  centerTop(rect: Rect) {\r\n    return { x: Rect.centerX(rect), y: Rect.top(rect) };\r\n  },\r\n  centerBottom(rect: Rect) {\r\n    return { x: Rect.centerX(rect), y: Rect.bottom(rect) };\r\n  },\r\n  setLeft(rect: Rect, y: number) {\r\n    rect.x = y;\r\n  },\r\n  setRight(rect: Rect, y: number) {\r\n    rect.x = y - rect.w;\r\n  },\r\n  setTop(rect: Rect, x: number) {\r\n    rect.y = x;\r\n  },\r\n  setBottom(rect: Rect, x: number) {\r\n    rect.y = x - rect.h;\r\n  },\r\n  setCenter(rect: Rect, value: { x: number; y: number }) {\r\n    rect.x = value.x - rect.w / 2;\r\n    rect.y = value.y - rect.h / 2;\r\n  },\r\n  intersectsPoint(rect: Rect, point: Point) {\r\n    const { x, y } = point;\r\n    return x >= Rect.left(rect) && x <= Rect.right(rect) && y >= Rect.top(rect) && y <= Rect.bottom(rect);\r\n  },\r\n  intersectsRect(rect1: Rect, rect2: Rect) {\r\n    return Rect.intersectsPoint(rect1, Rect.topLeft(rect2)) || Rect.intersectsPoint(rect1, Rect.topRight(rect2)) || Rect.intersectsPoint(rect1, Rect.bottomLeft(rect2)) || Rect.intersectsPoint(rect1, Rect.bottomRight(rect2));\r\n  },\r\n  intersectsLineAt(rect: Rect, lineStart: Point, lineEnd: Point) {\r\n    const points = Rect.points(rect);\r\n    const lines = [\r\n      [points[0], points[1]],\r\n      [points[1], points[2]],\r\n      [points[2], points[3]],\r\n      [points[3], points[0]],\r\n    ];\r\n\r\n    const intersections: Array<Point> = [];\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const line = lines[i];\r\n      const intersect = Line.intersectsLineAt(lineStart, lineEnd, line[0], line[1]);\r\n\r\n      if (intersect !== null) {\r\n        intersections.push(intersect);\r\n      }\r\n    }\r\n\r\n    if (!intersections.length) {\r\n      return null;\r\n    }\r\n\r\n    return intersections;\r\n  },\r\n  intersectsRayAt(rect: Rect, rayStart: Point, rayDirection: Vector, rayLength: number) {\r\n    const lineStart = rayStart;\r\n    const lineEnd = Point.add(rayStart, Point.mul(rayDirection, rayLength));\r\n    const points = Rect.intersectsLineAt(rect, lineStart, lineEnd);\r\n    if (points == null) {\r\n      return null;\r\n    }\r\n    // sort points by distance\r\n    return first(arraySortBy(points, (p) => Point.distance(rayStart, p)));\r\n  },\r\n  intersectsRayDistance(rect: Rect, rayStart: Point, rayDirection: Vector, rayLength: number): number | null {\r\n    const point = this.intersectsRayAt(rect, rayStart, rayDirection, rayLength);\r\n\r\n    if (!point) {\r\n      return null;\r\n    }\r\n\r\n    return Point.distance(rayStart, point);\r\n  },\r\n  shrink(rect: Rect, amount: number) {\r\n    return Rect.expand(rect, -amount);\r\n  },\r\n  expand(rect: Rect, amount: number) {\r\n    return {\r\n      x: rect.x - amount,\r\n      y: rect.y - amount,\r\n      w: rect.w + amount * 2,\r\n      h: rect.h + amount * 2,\r\n    };\r\n  },\r\n  fromCenter(center: Point, w: number, h: number) {\r\n    return { x: center.x - w / 2, y: center.y - h / 2, w, h };\r\n  },\r\n};\r\n\r\nexport const Vector = {\r\n  Zero: { x: 0, y: 0 },\r\n  Left: { x: -1, y: 0 },\r\n  Right: { x: 1, y: 0 },\r\n  Up: { x: 0, y: -1 },\r\n  Down: { x: 0, y: 1 },\r\n  isPointingUpward(vector: Vector) {\r\n    return vector.y < 0;\r\n  },\r\n  isPointingRightward(vector: Vector) {\r\n    return vector.x > 0;\r\n  },\r\n  isPointingLeftward(vector: Vector) {\r\n    return vector.x > 0;\r\n  },\r\n  isPointingDownward(vector: Vector) {\r\n    return vector.y > 0;\r\n  },\r\n  fromAngleRadians(radians: number) {\r\n    return { x: Math.cos(radians), y: Math.sin(radians) };\r\n  },\r\n  fromAngleDegrees(radians: number) {\r\n    return Vector.fromAngleRadians(toDegrees(radians));\r\n  },\r\n};\r\n\r\nexport const Line = {\r\n  intersectsLineAt(line1Start: Point, line1End: Point, line2Start: Point, line2End: Point): Point | null {\r\n    // return intersection;\r\n    const { x: x1, y: y1 } = line1Start;\r\n    const { x: x2, y: y2 } = line1End;\r\n    const { x: x3, y: y3 } = line2Start;\r\n    const { x: x4, y: y4 } = line2End;\r\n\r\n    // Check if none of the lines are of length 0\r\n    if ((x1 === x2 && y1 === y2) || (x3 === x4 && y3 === y4)) {\r\n      return null;\r\n    }\r\n\r\n    const denominator = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\r\n\r\n    // Lines are parallel\r\n    if (denominator === 0) {\r\n      return null;\r\n    }\r\n\r\n    let ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denominator;\r\n    let ub = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / denominator;\r\n\r\n    // is the intersection along the segments\r\n    if (ua < 0 || ua > 1 || ub < 0 || ub > 1) {\r\n      return null;\r\n    }\r\n\r\n    // Return a object with the x and y coordinates of the intersection\r\n    let x = x1 + ua * (x2 - x1);\r\n    let y = y1 + ua * (y2 - y1);\r\n\r\n    return { x, y };\r\n  },\r\n};\r\n\r\nexport function toDegrees(radians: number) {\r\n  return radians * (180 / Math.PI);\r\n}\r\n", "import { Point, Rect, Vector, toDegrees } from \"./lib/geometry\";\r\nimport { assign, docAppend as docAppendActual, first, h, lerp, mapRange, nullthrows, pipe, px, withFn } from \"./lib/util\";\r\n\r\ndeclare global {\r\n  interface Window {\r\n    $debug: { [key: string]: any };\r\n  }\r\n}\r\n\r\nwindow.$debug = {};\r\n\r\nconst defaultTerminalVelocity = 1000;\r\nconst showStepCount = false;\r\n\r\nconst styleShadow = {\r\n  // boxShadow: \"rgba(0, 0, 0, 0.25) 0px 54px 55px, rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px, rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px\",\r\n};\r\n\r\nconst _gameObjectNames = new Map<string, number>();\r\nfunction generateGameObjectName(baseName: string) {\r\n  const number = _gameObjectNames.get(baseName) ?? 1;\r\n  _gameObjectNames.set(baseName, number);\r\n  return `${baseName}${number}`;\r\n}\r\n\r\nfunction assertUniqueGameObjectName(name: string) {\r\n  if (_gameObjectNames.has(name)) {\r\n    throw new Error(`GameObject name \"${name}\" already exists`);\r\n  }\r\n}\r\n\r\nabstract class GameObject {\r\n  rect: Rect = { x: 10, y: 10, w: 10, h: 10 };\r\n  v: Vector = { x: 0, y: 0 };\r\n  private _name: string;\r\n\r\n  constructor(baseName: string, name?: string) {\r\n    if (baseName.trim() === \"\") {\r\n      throw new Error();\r\n    }\r\n\r\n    if (name) {\r\n      assertUniqueGameObjectName(name);\r\n      this._name = name;\r\n    } else {\r\n      this._name = generateGameObjectName(baseName);\r\n    }\r\n  }\r\n\r\n  get name() {\r\n    return this._name;\r\n  }\r\n\r\n  step(time: number): void {\r\n    // do nothing\r\n  }\r\n\r\n  render(): void {\r\n    // do nothing\r\n  }\r\n}\r\n\r\nclass World {\r\n  objects: GameObject[] = [];\r\n\r\n  push<T extends GameObject>(obj: T): T {\r\n    this.objects.push(obj);\r\n    return obj;\r\n  }\r\n\r\n  getRayIntersections(rayStart: Point, rayDirection: Vector, rayLength: number) {\r\n    const intersections: Array<{ obj: GameObject; point: Point; distance: number }> = [];\r\n    for (const obj of world.objects) {\r\n      const point = Rect.intersectsRayAt(obj.rect, rayStart, rayDirection, rayLength);\r\n\r\n      if (point) {\r\n        intersections.push({ obj, point, distance: Point.distance(rayStart, point) });\r\n      }\r\n    }\r\n\r\n    intersections.sort((a, b) => a.distance - b.distance);\r\n\r\n    return intersections;\r\n  }\r\n}\r\n\r\nconst world = new World();\r\n\r\nconst container = nullthrows(document.getElementById(\"container\"));\r\n\r\nfunction docContainer<T extends HTMLElement>(element: T): T {\r\n  return container.appendChild(element);\r\n}\r\n\r\nclass Platform extends GameObject {\r\n  div: HTMLElement;\r\n  color: string = \"white\";\r\n\r\n  constructor(args: { name?: string }) {\r\n    super(\"Platform\", args.name);\r\n    this.div = docContainer(\r\n      h.div({\r\n        style: {\r\n          backgroundColor: this.color,\r\n          display: \"inline-block\",\r\n          position: \"absolute\",\r\n          borderRadius: px(4),\r\n          ...styleShadow,\r\n        },\r\n      })\r\n    );\r\n  }\r\n\r\n  render() {\r\n    this.div.style.backgroundColor = this.color;\r\n    this.div.style.width = px(this.rect.w);\r\n    this.div.style.height = px(this.rect.h);\r\n    this.div.style.top = px(this.rect.y);\r\n    this.div.style.left = px(this.rect.x);\r\n  }\r\n}\r\n\r\nclass FinalPlatform extends Platform {\r\n  finalTriggered = false;\r\n\r\n  constructor() {\r\n    super({ name: \"FinalPlatform\" });\r\n  }\r\n\r\n  step(time: number): void {\r\n    const ball = world.objects.find((o) => o instanceof Ball) as Ball | null;\r\n    const ballY = ball?.rect.y ?? 0;\r\n    const distance = this.rect.y - ballY;\r\n    if (distance < 500 && ball != null) {\r\n      if (!this.finalTriggered) {\r\n        this.finalTriggered = true;\r\n\r\n        setTimeout(() => {\r\n          ball.cameraFollow = false;\r\n          const ballCount = 10;\r\n          const halfBallCount = ballCount / 2;\r\n          const createBall = (x: number) => {\r\n            world.push(\r\n              withFn(new Ball(), (o) => {\r\n                o.rect.x = x;\r\n                o.cameraFollow = false;\r\n                o.rect.y = this.rect.y - 1200 - lerp(0, 2000, Math.random());\r\n                o.bounceVelocity *= lerp(1, 1.3, Math.random());\r\n              })\r\n            );\r\n          };\r\n\r\n          for (let i = 0; i < halfBallCount; i++) {\r\n            createBall(lerp(0, Rect.left(ball.rect) - ball.rect.w * 3, (i + 1) / halfBallCount));\r\n          }\r\n\r\n          for (let i = 0; i < halfBallCount; i++) {\r\n            createBall(lerp(Rect.right(ball.rect) - 40, 900, (i + 1) / halfBallCount));\r\n          }\r\n        }, 1000);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nclass InputPlatform extends GameObject {\r\n  div: HTMLElement;\r\n  isFirstCollision = true;\r\n  input: HTMLInputElement;\r\n\r\n  constructor(args: {\r\n    inputLabel: string;\r\n    buttonLabel: string;\r\n    onSubmit: () => void;\r\n    onFocusInput?: () => void;\r\n    // onInputChange: (value: string) => void\r\n  }) {\r\n    super(\"InputPlatform\", `InputPlatform: ${args.inputLabel}`);\r\n    this.input = h.input({\r\n      style: {\r\n        backgroundColor: \"#f3f3f3\",\r\n        border: \"1px solid #ccc\",\r\n        borderRadius: px(4),\r\n        padding: px(8),\r\n        outline: \"none\",\r\n        color: \"#333\",\r\n        fontSize: \"1.3rem\",\r\n      },\r\n      value: \"\",\r\n      onkeydown: (e) => {\r\n        if (e.code === \"Enter\") {\r\n          onSubmit(e);\r\n        }\r\n      },\r\n      onfocus: args.onFocusInput,\r\n      // onchange: (o) => args.onInputChange(o.target.value),\r\n    });\r\n\r\n    const onSubmit = (e) => {\r\n      button.disabled = true;\r\n      button.style.cursor = \"default\";\r\n      this.input.disabled = true;\r\n      label.style.opacity = \"0.5\";\r\n      args.onSubmit();\r\n    };\r\n\r\n    const button = h.button({\r\n      innerText: args.buttonLabel,\r\n      onclick: onSubmit,\r\n      style: {\r\n        marginTop: px(4),\r\n        alignSelf: \"end\",\r\n        color: \"white\",\r\n        backgroundColor: \"#dc0045\",\r\n        fontWeight: \"bold\",\r\n        padding: \"12px 40px 9px 40px\",\r\n        borderRadius: px(4),\r\n        outline: \"none\",\r\n        border: \"none\",\r\n        borderBottom: \"3px solid #980032\",\r\n        cursor: \"pointer\",\r\n        fontSize: \"1rem\",\r\n        // boxShadow: \"rgba(0, 0, 0, 0.25) 0px 54px 55px, rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px, rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px\",\r\n        // boxShadow: \"rgba(255, 255, 255, 0.1) 0px 1px 1px 0px inset, rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px\",\r\n        // boxShadow: \"rgba(0, 0, 0, 0.5) 0px 10px 25px -5px, rgba(0, 0, 0, 0.04) 0px 10px 10px -5px\",\r\n        // box-shadow: rgba(0, 0, 0, 0.1) 0px 20px 25px -5px, rgba(0, 0, 0, 0.04) 0px 10px 10px -5px;\r\n      },\r\n    });\r\n\r\n    const label = h.div(\r\n      {\r\n        style: {\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          rowGap: px(8),\r\n        },\r\n      },\r\n      [\r\n        h.div({\r\n          style: {\r\n            color: \"#444\",\r\n            fontSize: \"1.3rem\",\r\n          },\r\n          innerHTML: args.inputLabel,\r\n        }),\r\n        this.input,\r\n        button,\r\n      ]\r\n    );\r\n\r\n    this.div = docContainer(\r\n      h.div(\r\n        {\r\n          style: {\r\n            backgroundColor: \"white\",\r\n            // border: \"1px solid red\",\r\n            display: \"inline-block\",\r\n            position: \"absolute\",\r\n            padding: px(20),\r\n            borderRadius: px(4),\r\n            ...styleShadow,\r\n            // backgroundColor: \"green\",\r\n          },\r\n        },\r\n        [label]\r\n      )\r\n    );\r\n  }\r\n\r\n  render() {\r\n    this.div.style.width = px(this.rect.w);\r\n    // this.div.style.height = px(this.rect.h);\r\n    this.div.style.top = px(this.rect.y);\r\n    this.div.style.left = px(this.rect.x);\r\n  }\r\n\r\n  onCollide(gameObject: GameObject, time: number) {\r\n    if (this.isFirstCollision) {\r\n      this.isFirstCollision = false;\r\n      this.input.focus();\r\n    }\r\n  }\r\n}\r\n\r\nfunction isPlatform(obj: GameObject): boolean {\r\n  return obj instanceof Platform || obj instanceof InputPlatform;\r\n}\r\n\r\nclass Ball extends GameObject {\r\n  public gravity = 2000;\r\n  public terminalVelocity = defaultTerminalVelocity;\r\n\r\n  static DEFAULT_GRAVITY = 2000;\r\n\r\n  private _boundingBoxWidth = 20;\r\n  private _boundingBoxHeight = 20;\r\n  private _renderHeight = 48;\r\n  private _renderOffsetX = 0;\r\n  private _renderOffsetY = 0;\r\n  private _renderWidth = 48;\r\n  private _renderActualHeight = 48;\r\n  private _renderActualWidth = 48;\r\n\r\n  private _ballDiv: HTMLElement;\r\n  private _ballImageDiv: HTMLElement;\r\n  private _ballImageContainerDiv: HTMLElement;\r\n  private _rotation: number;\r\n\r\n  public stretch = true;\r\n  // public stretch = false;\r\n  public bounce = true;\r\n  // public bounce = false;\r\n  public squash = true;\r\n  public collision = true;\r\n  public useSquashEnergy = true;\r\n\r\n  public showBallBoundingBox = false;\r\n  public showImageContainer = false;\r\n  public ballRenderMode: \"solid\" | \"outline\" = \"solid\";\r\n  // debug\r\n  // public showBallBoundingBox = true;\r\n  // public showImageContainer = true;\r\n  // public ballRenderMode: \"solid\" | \"outline\" = \"outline\";\r\n\r\n  public color = \"#fad300\";\r\n  public targets = Array<Point>();\r\n  public bounceVelocity = -900;\r\n  public cameraFollow = true;\r\n  private _squashEnergy = 0;\r\n\r\n  get renderActualHeight() {\r\n    return this._renderActualHeight;\r\n  }\r\n\r\n  constructor(name?: string) {\r\n    super(\"Ball\", name);\r\n\r\n    assign(this.rect, { x: 50, y: 50, w: this._boundingBoxWidth, h: this._boundingBoxHeight });\r\n    this._ballDiv = docContainer(\r\n      h(\"div\", {\r\n        style: {\r\n          border: this.showBallBoundingBox && \"1px solid blue\",\r\n          display: \"inline-block\",\r\n          position: \"absolute\",\r\n        },\r\n      })\r\n    );\r\n\r\n    const ballOuterRect = { x: 0, y: 0, w: this._renderActualWidth * 2, h: this._renderActualHeight * 2 };\r\n\r\n    this._ballImageDiv = h(\"div\", {\r\n      // always centered ball graphic to squash and stretch\r\n      style: {\r\n        width: px(ballOuterRect.w),\r\n        height: px(ballOuterRect.h),\r\n        borderRadius: \"50%\",\r\n        ...styleShadow,\r\n      },\r\n    });\r\n\r\n    this._ballImageContainerDiv = docContainer(\r\n      h(\r\n        // fixed sized container\r\n        \"div\",\r\n        {\r\n          style: {\r\n            border: this.showImageContainer && \"1px solid blue\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            position: \"absolute\",\r\n            width: px(ballOuterRect.w),\r\n            height: px(ballOuterRect.h),\r\n          },\r\n        },\r\n        [this._ballImageDiv]\r\n      )\r\n    );\r\n  }\r\n\r\n  render() {\r\n    this._ballDiv.style.width = px(this.rect.w);\r\n    this._ballDiv.style.height = px(this.rect.h);\r\n    this._ballDiv.style.top = px(this.rect.y);\r\n    this._ballDiv.style.left = px(this.rect.x);\r\n\r\n    const ballOuterRect = { x: 0, y: 0, w: this._renderActualHeight * 2, h: this._renderActualWidth * 2 };\r\n\r\n    Rect.setCenter(ballOuterRect, Rect.center(this.rect));\r\n    this._ballImageContainerDiv.style.top = px(ballOuterRect.y + this._renderOffsetY);\r\n    this._ballImageContainerDiv.style.left = px(ballOuterRect.x + this._renderOffsetX);\r\n\r\n    this._ballImageDiv.style.backgroundColor = this.ballRenderMode === \"solid\" ? this.color : \"\";\r\n    this._ballImageDiv.style.border = this.ballRenderMode === \"outline\" ? `1px solid ${this.color}` : \"\";\r\n\r\n    this._ballImageDiv.style.height = px(this._renderActualHeight);\r\n    this._ballImageDiv.style.height = px(this._renderActualHeight);\r\n    this._ballImageDiv.style.width = px(this._renderActualWidth);\r\n\r\n    this._ballImageDiv.style.transform = `rotate(${toDegrees(this._rotation)}deg) scale(${this._renderHeight / this._renderActualHeight}, ${this._renderWidth / this._renderActualWidth})`;\r\n  }\r\n\r\n  onCollide(gameObject: GameObject, time: number) {\r\n    let { rect, v } = this;\r\n\r\n    // if (this.bounce) {\r\n    //   const intersectAmount = Rect.bottom(rect) - Rect.top(gameObject.rect);\r\n    //   const relativeTimeOfContact = intersectAmount / v.y;\r\n    //   // move back in time\r\n    //   assign(rect, Point.add(rect, Point.mul(v, -relativeTimeOfContact)));\r\n    //   v.y += this.gravity * time; // hack - gravity is goig nto be subtracted next frame this preserves the energy\r\n    //   v.y = -v.y;\r\n    //   assign(rect, Point.add(rect, Point.mul(v, relativeTimeOfContact)));\r\n    // } else {\r\n    //   v.y = 0;\r\n    //   v.x = 0;\r\n    //   Rect.setBottom(rect, Rect.top(gameObject.rect));\r\n    // }\r\n\r\n    if (this.targets.length > 0) {\r\n      Rect.setBottom(rect, Rect.top(gameObject.rect));\r\n      const target = nullthrows(this.targets.shift());\r\n      this.launchAt(target);\r\n    } else {\r\n      if (this.bounce) {\r\n        if (this._squashEnergy > 0) {\r\n          // TODO: Maybe use the squash energy\r\n          // v.y -= this._squashEnergy;\r\n          this._squashEnergy = 0;\r\n        }\r\n\r\n        v.y = this.bounceVelocity; // e.g. bounceVelocity = -900\r\n      } else {\r\n        v.y = 0;\r\n      }\r\n\r\n      v.x = 0;\r\n      Rect.setBottom(rect, Rect.top(gameObject.rect));\r\n    }\r\n  }\r\n\r\n  step(time: number) {\r\n    let { rect, v } = this;\r\n\r\n    let platformInfos = world.getRayIntersections(Rect.center(rect), Vector.Down, this._renderActualHeight / 2).filter((o) => isPlatform(o.obj));\r\n    let isSquashing = this.squash && platformInfos.length > 0;\r\n\r\n    if (!isSquashing) {\r\n      v.y += this.gravity * time; // technically it should only apply gravity if it's not on the group\r\n\r\n      if (v.y > this.terminalVelocity) {\r\n        v.y = this.terminalVelocity;\r\n      }\r\n\r\n      // if (Point.magnitude(v) > this.terminalVelocity) {\r\n      // more accurate accurate terminal velocity but not needed\r\n      //   const newV = Point.mul(Point.normalize(v), this.terminalVelocity);\r\n      //   this.v = newV;\r\n      //   v = newV;\r\n      // }\r\n    }\r\n\r\n    const moveBy = Point.mul(v, time);\r\n    assign(rect, Point.add(rect, moveBy));\r\n\r\n    platformInfos = world.getRayIntersections(Rect.center(rect), Vector.Down, this._renderActualHeight / 2).filter((o) => isPlatform(o.obj));\r\n    isSquashing = this.squash && platformInfos.length > 0;\r\n\r\n    const performStretch = () => {\r\n      const speed = Point.magnitude(v);\r\n      const startStretchSpeed = 400;\r\n      const percent = speed < startStretchSpeed ? 0 : mapRange(speed, startStretchSpeed, this.terminalVelocity, 0, 1);\r\n\r\n      let renderHeight = this._renderActualHeight * lerp(1, 1.5, percent);\r\n\r\n      const length = renderHeight;\r\n      const platformInfos = world.getRayIntersections(Rect.center(rect), Vector.Down, length).filter((o) => o.obj !== this);\r\n\r\n      if (platformInfos.length && v.y < 0) {\r\n        // don't make it taller than the space between the ball and the platform\r\n        const intersection = platformInfos[0];\r\n        const fudge = 12;\r\n        const maxRenderHeight = intersection.distance + this._boundingBoxHeight / 2 + fudge;\r\n        renderHeight = Math.min(renderHeight, maxRenderHeight);\r\n      }\r\n\r\n      const directionVector = Point.normalize(this.v);\r\n      const oppositeDirectionVector = Point.mul(directionVector, -1);\r\n\r\n      const targetDistanceFromEdge = this._renderActualHeight / 2 - this.rect.y;\r\n      const currentDistanceFromEdit = renderHeight / 2 - this.rect.y;\r\n      const offsetAmount = currentDistanceFromEdit - targetDistanceFromEdge;\r\n\r\n      const offsetVector = Point.mul(oppositeDirectionVector, offsetAmount);\r\n\r\n      this._renderHeight = renderHeight;\r\n      this._renderWidth = this._renderActualWidth * lerp(1, 0.9, percent);\r\n      this._renderOffsetY = offsetVector.y;\r\n      this._renderOffsetX = offsetVector.x;\r\n    };\r\n\r\n    if (isSquashing) {\r\n      // squash\r\n      const closestDistance = platformInfos[0];\r\n      this._renderHeight = closestDistance.distance * 2;\r\n      const shrinkPercent = 1 - this._renderHeight / this._renderActualHeight;\r\n      this._renderWidth = this._renderActualWidth * (1 + shrinkPercent) * 0.9;\r\n      this._renderOffsetY = 0;\r\n      this._rotation = Point.angle(Vector.Up);\r\n      if (this.useSquashEnergy) {\r\n        if (Vector.isPointingDownward(v)) {\r\n          if (this._squashEnergy === 0) {\r\n            const percentEnergyToStore = 0.95;\r\n            const energyToStore = v.y * percentEnergyToStore;\r\n            this._squashEnergy = energyToStore;\r\n            v.y -= energyToStore;\r\n          }\r\n        }\r\n        if (Vector.isPointingUpward(v)) {\r\n          // TODO: Ideally release energy when squash is over\r\n          // if (this._squashEnergy > 0) {\r\n          //   v.y -= Math.abs(this._squashEnergy);\r\n          //   this._squashEnergy = 0;\r\n          // }\r\n        }\r\n      }\r\n    } else if (this.stretch) {\r\n      this._renderHeight = this._renderActualHeight;\r\n      this._renderWidth = this._renderActualWidth;\r\n      performStretch();\r\n      this._rotation = Point.angle(v);\r\n    } else {\r\n      this._renderHeight = this._renderActualHeight;\r\n      this._renderWidth = this._renderActualWidth;\r\n      this._rotation = Point.angle(v);\r\n    }\r\n\r\n    if (this.collision) {\r\n      // check for collision with platform\r\n      const platform = world.objects.find((o) => isPlatform(o) && Rect.intersectsRect(o.rect, rect));\r\n\r\n      if (platform) {\r\n        this.onCollide(platform, time);\r\n        if (platform instanceof InputPlatform) {\r\n          platform.onCollide(this, time);\r\n        }\r\n      }\r\n    }\r\n\r\n    // scroll the document\r\n\r\n    // if (rect.y > window.innerHeight / 2) {\r\n    //   window.scrollBy(0, moveBy.y);\r\n    // }\r\n\r\n    if (this.cameraFollow) {\r\n      if (rect.y - window.scrollY > window.innerHeight / 2) {\r\n        window.scrollTo(0, rect.y - window.innerHeight / 2);\r\n      }\r\n    }\r\n\r\n    // document.body.scrollTop = this.rect.y;\r\n  }\r\n\r\n  launchAt(target: Point) {\r\n    const isBelowY = (below: number, above: number) => below > above;\r\n\r\n    if (!isBelowY(target.y, this.rect.y)) {\r\n      throw new Error(\"target above ball not implemented yet\");\r\n    }\r\n\r\n    // - calculate how long before it would reach that height\r\n    const calcTimeToTargetY = (startY: number, gravity: number, initialForce: number, terminalVelocity: number, targetY: number) => {\r\n      if (!isBelowY(targetY, startY)) {\r\n        throw new Error(\"This only works with targets below the startY.\");\r\n      }\r\n\r\n      let vy = initialForce;\r\n      const time = 1 / 60;\r\n      let y = startY;\r\n      let totalTime = 0;\r\n      let loopCount = 0;\r\n\r\n      while (!isBelowY(y, targetY)) {\r\n        // if (loopCount > 2000) {\r\n        //   throw new Error(\"Infinite loop\");\r\n        // }\r\n        loopCount++;\r\n        vy += gravity * time;\r\n\r\n        if (vy > terminalVelocity) {\r\n          vy = terminalVelocity;\r\n        }\r\n\r\n        y += vy * time;\r\n        totalTime += time;\r\n      }\r\n\r\n      const positionDiff = y - targetY;\r\n      const timeDiff = positionDiff / vy;\r\n      totalTime -= timeDiff;\r\n\r\n      return totalTime;\r\n    };\r\n\r\n    const initialForce = -800;\r\n    const timeToTarget = calcTimeToTargetY(this.rect.y, this.gravity, initialForce, defaultTerminalVelocity, target.y);\r\n    this.v.y = initialForce;\r\n    this.v.x = (target.x - this.rect.x) / timeToTarget;\r\n  }\r\n}\r\n\r\nasync function main() {\r\n  let platform1: InputPlatform;\r\n  let platform2: InputPlatform;\r\n  let platform3: InputPlatform;\r\n  let platform4: InputPlatform;\r\n  let platform5: InputPlatform;\r\n\r\n  const leftSide = 50;\r\n  const rightSide = 550;\r\n  const spaceBetweenInputs = 1000;\r\n\r\n  const platformTopRight = (platform: InputPlatform) => Point.subtract(Rect.topRight(platform.rect), { x: 10, y: 0 });\r\n\r\n  const activateBall = () => {\r\n    ball.bounce = true;\r\n    ball.gravity = Ball.DEFAULT_GRAVITY;\r\n    ball.v.y = 900;\r\n  };\r\n\r\n  window.scrollTo(0, 0);\r\n  setTimeout(() => window.scrollTo(0, 0));\r\n\r\n  const hurryBall = () => {\r\n    if (Vector.isPointingUpward(ball.v) || ball.v.y < 800) ball.v.y = 800;\r\n  };\r\n\r\n  platform1 = world.push(\r\n    assign(\r\n      new InputPlatform({\r\n        inputLabel: \"Spaces or Tabs?\",\r\n        buttonLabel: \"Next\",\r\n        onSubmit: () => {\r\n          activateBall();\r\n          hurryBall();\r\n          ball.targets.push(platformTopRight(platform1));\r\n          ball.targets.push(Rect.topCenter(platform2.rect));\r\n        },\r\n        onFocusInput: () => {\r\n          activateBall();\r\n        },\r\n      }),\r\n      { rect: { x: leftSide, y: 450, w: 300, h: 25 } }\r\n    )\r\n  );\r\n\r\n  const finalPlatform = world.push(assign(new FinalPlatform(), { rect: { x: 0, y: 8000 - 50, w: 1000, h: 50 } }));\r\n  world.push(assign(new Platform({ name: \"Padding\" }), { rect: { x: 0, y: Rect.bottom(finalPlatform.rect), w: 1000, h: 40 }, color: \"transparent\" })); // this is just to visually add padding to the bottom\r\n\r\n  platform2 = world.push(\r\n    assign(\r\n      new InputPlatform({\r\n        inputLabel: \"vim or emacs?\",\r\n        buttonLabel: \"Next\",\r\n        onSubmit: () => {\r\n          hurryBall();\r\n          ball.targets.push(Rect.topLeft(platform2.rect));\r\n          ball.targets.push(Rect.topCenter(platform3.rect));\r\n        },\r\n      }),\r\n      { rect: { x: rightSide, y: platform1.rect.y + spaceBetweenInputs, w: 300, h: 25 } }\r\n    )\r\n  );\r\n\r\n  platform3 = world.push(\r\n    assign(\r\n      new InputPlatform({\r\n        inputLabel: \"iPhone or Android?\",\r\n        buttonLabel: \"Next\",\r\n        onSubmit: () => {\r\n          hurryBall();\r\n          ball.targets.push(platformTopRight(platform3));\r\n          ball.targets.push(Rect.topCenter(platform4.rect));\r\n        },\r\n      }),\r\n      { rect: { x: leftSide, y: platform2.rect.y + spaceBetweenInputs, w: 300, h: 25 } }\r\n    )\r\n  );\r\n\r\n  platform4 = world.push(\r\n    assign(\r\n      new InputPlatform({\r\n        inputLabel: \"Xbox or Playstation?\",\r\n        buttonLabel: \"Next\",\r\n        onSubmit: () => {\r\n          hurryBall();\r\n          ball.targets.push(Rect.topLeft(platform4.rect));\r\n          ball.targets.push(Rect.topCenter(platform5.rect));\r\n        },\r\n      }),\r\n      { rect: { x: rightSide, y: platform3.rect.y + spaceBetweenInputs, w: 300, h: 25 } }\r\n    )\r\n  );\r\n\r\n  platform5 = world.push(\r\n    assign(\r\n      new InputPlatform({\r\n        inputLabel: \"Windows or Linux?\",\r\n        buttonLabel: \"Done\",\r\n        onSubmit: () => {\r\n          hurryBall();\r\n          ball.targets.push(platformTopRight(platform5));\r\n          ball.targets.push(Rect.topCenter(finalPlatform.rect));\r\n        },\r\n      }),\r\n      { rect: { x: leftSide, y: platform4.rect.y + spaceBetweenInputs, w: 300, h: 25 } }\r\n    )\r\n  );\r\n\r\n  const ball = world.push(\r\n    withFn(new Ball(\"Main Ball\"), (o) => {\r\n      o.bounce = false; // turn on after activitate\r\n      o.gravity = 0; // turn on on activiate\r\n      o.rect.y = platform1.rect.y - 35;\r\n      o.rect.x = platform1.rect.x + o.rect.w;\r\n\r\n      const test: null | \"last-question\" | \"final-platform\" | \"initial-bounce\" = null;\r\n\r\n      switch (test) {\r\n        case \"initial-bounce\":\r\n          o.rect.y = platform1.rect.y - 300;\r\n          o.bounce = true; // turn on after activitate\r\n          o.gravity = Ball.DEFAULT_GRAVITY; // turn on on activiate\r\n          break;\r\n\r\n        case \"last-question\":\r\n          o.rect.y = platform5.rect.y - 300;\r\n          o.rect.x = Rect.centerX(platform5.rect);\r\n          o.bounce = true;\r\n          o.gravity = Ball.DEFAULT_GRAVITY;\r\n          break;\r\n        case \"final-platform\":\r\n          o.rect.y = finalPlatform.rect.y - 900;\r\n          o.rect.x = Rect.centerX(finalPlatform.rect);\r\n          o.bounce = true;\r\n          o.gravity = Ball.DEFAULT_GRAVITY;\r\n          break;\r\n      }\r\n    })\r\n  );\r\n\r\n  // window.$debug[\"ball\"] = ball;\r\n\r\n  // launch\r\n\r\n  // ball.launchAt(targetBall.rect);\r\n\r\n  const stepCountDiv = docContainer(h.div({ style: { display: showStepCount ? \"block\" : \"none\", position: \"absolute\", top: px(0), right: px(5), color: \"white\" } }));\r\n  let stepCount = 0;\r\n\r\n  const render = () => {\r\n    world.objects.forEach((obj) => obj.render());\r\n\r\n    stepCountDiv.innerText = stepCount.toString();\r\n  };\r\n\r\n  const step = (time: number) => {\r\n    world.objects.forEach((obj) => obj.step(time));\r\n  };\r\n\r\n  const targetFps = 100;\r\n\r\n  let state: \"playing\" | \"paused\" = \"playing\"; // initial state\r\n\r\n  const stepFrame = (count: number = 1) => {\r\n    for (let i = 0; i < count; i++) {\r\n      step(1 / targetFps);\r\n      stepCount++;\r\n    }\r\n  };\r\n\r\n  window.addEventListener(\"keydown\", (e) => {\r\n    if (!(e.altKey && e.ctrlKey)) return;\r\n\r\n    if (e.code === \"KeyP\") {\r\n      if (state === \"playing\") {\r\n        state = \"paused\";\r\n      } else {\r\n        state = \"playing\";\r\n      }\r\n    }\r\n\r\n    if (e.code === \"ArrowRight\" || e.code === \"PageDown\") {\r\n      if (e.shiftKey) {\r\n        stepFrame(10);\r\n      } else {\r\n        stepFrame();\r\n      }\r\n      render();\r\n    }\r\n  });\r\n\r\n  // stepFrame(50); // skip frames - before hit ground\r\n\r\n  render();\r\n\r\n  setInterval(() => {\r\n    if (state !== \"playing\") return;\r\n    stepFrame();\r\n    render();\r\n  }, 1000 / targetFps);\r\n}\r\n\r\nmain();\r\n"],
  "mappings": "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",
  "names": ["h", "platformInfos", "initialForce"]
}
